#!/usr/bin/python3
# -*- coding: utf-8 -*-
import numpy as np

# 靶标坐标系，默认和相机系重合
# 点从左至右,单位m    x周指向右，y周指向下，原点在中间的LED
plane_real_ptL = np.array([
    [-0.50, 0.00, 0],
    [-0.20,-0.10, 0],
    [ 0.00, 0.00, 0],
    [ 0.20,-0.10, 0],
    [ 0.50, 0.00, 0],
])
# 点坐标按顺时针排列，最左边的点为第一个，单位m
plane_real_ptL_sf = np.array([])
# 世界系为ENU则有靶标系至世界系的转换矩阵
R_wt = np.array([
    [0,0,1],
    [-1,0,0],
    [0,-1,0],
])



#视场角约14.61
# # E:\\GalaxyPicture\\exp1
# camK_lf = np.array([
#     [7281.038109721694, 0.0000,  1222.263140039430],
#     [0.0000, 7300.026629124834,  1102.041992272973],
#     [0.0000,  0.0000,  1.0000],
# ])
# #E:\\GalaxyPicture\\exp2
# camK_lf = np.array([
#     [9432.431994466819, 0.0000,  1042.153536040823],
#     [0.0000, 9445.336276968366,  850.0072793998182],
#     [0.0000,  0.0000,  1.0000],
# ])

#exp4 = exp5, 镜头旋到底了，无穷远               
# 标定的时候重投影误差只有0.03
camK_lf = np.array(
   [[7.76353693e+03, 0.00000000e+00, 1.22151558e+03],
 [0.00000000e+00, 7.89675676e+03, 1.02598376e+03],
 [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]
 )
distortion_coeffs = np.array([
    [ 1.37369289e-01, -1.25314205e+01, -1.56390713e-03, -4.70760679e-02,
  9.15447618e+02]
])         
# #多标定几个畸变系数，标定的时候重投影误差只有0.035  标定精度差不多，感觉畸变系数多了也没太大的用处
# camK_lf = np.array([
#     [7.69519293e+03, 0.00000000e+00, 1.22248590e+03],
#  [0.00000000e+00, 7.95441708e+03, 1.02491057e+03],
#  [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
#  ])
# distortion_coeffs = np.array([
#    [-3.25391398e-01],
#  [ 4.38341515e+00],
#  [ 1.16426104e-02],
#  [-1.35109593e-02],
#  [ 4.19279686e+02],
#  [ 3.26223840e-01],
#  [-4.38152793e+00],
#  [-4.18328478e+02],
#  [ 0.00000000],
#  [ 0.00000000],
#  [ 0.00000000],
#  [ 0.00000000],
#  [ 0.00000000],
#  [ 0.00000000]
# ])         



# 58 49 35

# 视场角约110度
camK_sf = np.array([
    [ 441.7348,  0.0000,  640.2314],
    [ 0.0000,  441.5449,  512.8424],
    [ 0.0000,  0.0000,  1.0000],
])

# 相机系到FLU机体系的旋转矩阵
R_bc = np.array([
    [0,0,1],
    [-1,0,0],
    [0,-1,0],
])
R_cb = R_bc.T
